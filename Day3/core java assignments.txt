Day 1
0. Revise from readme_day1 along with other readmes.
1. Accept any numbers as command line arguments from user. If user supplies less than 2 arguments supply error message & terminate. If  correct, compute average & display the same.
(args.length = to find array size 
Double.parseDouble(s) for parsing double values)

2. Create a class Calculator(in package com.app) with 2 private double data members firstNumber & secondNumber.
Supply getters & setters.
Add 4 instance methods add,subtract,multiply & divide , without parameters , to return result of calculation.
Divide method should return 0 in case of 0 denominator.
Create a TestCalculator class (in package tester) with scanner.
Accept 2 numbers from user & set them in Calculator.
Menu 1: Add
2 : Subtract 
3 : Multiply
4 : Divide
5 :Exit.


3. Display food menu to user. User will select items from menu along with the quantity. Hard code food prices. (eg 1. Dosa 2. Samosa .......10 . Generate Bill ) When user enters 'Generate Bill' option, display total bill & exit.
Create above class in "tester" package

4. Write a class Converter.java , in package "utils.conversion"
Add static methods for conversion & returning result  to caller.
5.1 Convert pounds to kilogram(1 pound=0.4536 Kg)
eg : I/P 100
O/p 45.36Kg
5.2 Convert the temperature in Celsius to Fahrenheit (F = C× 9/5 + 32)
5.3 Convert seconds into a formatted string , to display hour,min,seconds
eg : I/P 67890
O/P  18h51m30s



5. Please go through ready made code samples --Test1,Test2,Test3,Test4
& guess the o/p


Day 2
1. Create a Customer class , in a package com.cdac.core with data members 
name(string),email(string),age(int), creditLimit(double)
1.1 Supply a parameterized constructor to accept all details from user
1.2 Supply an argument less  constructor to init name to "Rama" , email to "rama@gmail.com",age=25,creditLimit=10000
1.3 Supply another constructor , to init creditLimit to 15000, taking rest of the i/ps from user.
1.4 Write a method , getDetails to return string form of customer name & credit limit details.
1.5 Supply getter & setter for creditLimit.

Must make use of this(...) for constructor chaining.

1.6 Write a TestCustomer class in "tester" package ,  to test all of above.
Using Scanner , accept customer details suitably & test all 3 constructors.
Display customer details.
Increase credit limit of the 1st customer by 1000 & display details again.

2. Solve Tank assignment along with memory picture.

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
   
    s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}

3. Refer to instructions of "install IDE" & follow the same.

Day 3
0. Open javadocs in browser .(java8_docs\docs\api\index.html)
1. Follow lab sequence for revision
2. Solve this.
Create java application for the following.
Create Student class in a package "com.cdac.core" 
2.1 Every student must have   --- id(int) --if possible system generated(clue : use static id counter), name (String), email(String), age(int), gpa (double)

2.2 Add suitable parameterized constructor.
Don't accept gpa in constructor , since it has to be computed.

2.3 Add a method getDetails to  fetch complete student details
(ret type -- String)

2.4  Add computeGPA method in Student class
Accept 3 scores for quiz , test & assignments
GPA should be computed on 20 % of quiz score, 50% of test score & 30% of assignment score.

3 Write a TestStudents class in "com.tester" package

Accept how many students to enroll in the class ,  from user.

 Accept student details(w/o gpa) , using loop.
Accept student scores & compute GPAs , using loop
Display name of student having highest GPA.